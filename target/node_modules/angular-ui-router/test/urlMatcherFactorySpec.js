describe("UrlMatcher",function(){var e;beforeEach(function(){angular.module("ui.router.router.test",function(
){}).config(function(t){e=t}),module("ui.router.router","ui.router.router.test"),inject(function(t){t
.invoke(e.$get)})}),describe("provider",function(){it("should factory matchers with correct configuration"
,function(){e.caseInsensitive(!1),expect(e.compile("/hello").exec("/HELLO")).toBeNull(),e.caseInsensitive
(!0),expect(e.compile("/hello").exec("/HELLO")).toEqual({}),e.strictMode(!0),expect(e.compile("/hello"
).exec("/hello/")).toBeNull(),e.strictMode(!1),expect(e.compile("/hello").exec("/hello/")).toEqual({}
)}),it("should correctly validate UrlMatcher interface",function(){var t=new UrlMatcher("/");expect(e
.isMatcher(t)).toBe(!0),t.validates=null,expect(e.isMatcher(t)).toBe(!1)})}),it("should match static URLs"
,function(){expect((new UrlMatcher("/hello/world")).exec("/hello/world")).toEqual({})}),it("should match static case insensitive URLs"
,function(){expect((new UrlMatcher("/hello/world",{caseInsensitive:!0})).exec("/heLLo/World")).toEqual
({})}),it("should match against the entire path",function(){var e=new UrlMatcher("/hello/world");expect
(e.exec("/hello/world/")).toBeNull(),expect(e.exec("/hello/world/suffix")).toBeNull()}),it("should parse parameter placeholders"
,function(){var e=new UrlMatcher("/users/:id/details/{type}/{repeat:[0-9]+}?from&to");expect(e.parameters
()).toEqual(["id","type","repeat","from","to"])}),it("should encode and decode duplicate query string values as array"
,function(){var e=new UrlMatcher("/?foo"),t={foo:["bar","baz"]};expect(e.exec("/",t)).toEqual(t),expect
(e.format(t)).toBe("/?foo=bar&foo=baz")}),it("should encode and decode slashes in parameter values",function(
){var e=new UrlMatcher("/:foo");expect(e.format({foo:"/"})).toBe("/%252F"),expect(e.format({foo:"//"}
)).toBe("/%252F%252F")}),describe("snake-case parameters",function(){it("should match if properly formatted"
,function(){var e=new UrlMatcher("/users/?from&to&snake-case&snake-case-triple"),t=e.parameters();expect
(t.length).toBe(4),expect(t).toContain("from"),expect(t).toContain("to"),expect(t).toContain("snake-case"
),expect(t).toContain("snake-case-triple")}),it("should not match if invalid",function(){var e="Invalid parameter name '-snake' in pattern '/users/?from&to&-snake'"
;expect(function(){new UrlMatcher("/users/?from&to&-snake")}).toThrow(e),e="Invalid parameter name 'snake-' in pattern '/users/?from&to&snake-'"
,expect(function(){new UrlMatcher("/users/?from&to&snake-")}).toThrow(e)})}),describe(".exec()",function(
){it("should capture parameter values",function(){var e=new UrlMatcher("/users/:id/details/{type}/{repeat:[0-9]+}?from&to"
);expect(e.exec("/users/123/details//0",{})).toEqual({id:"123",type:"",repeat:"0"})}),it("should capture catch-all parameters"
,function(){var e=new UrlMatcher("/document/*path");expect(e.exec("/document/a/b/c",{})).toEqual({path
:"a/b/c"}),expect(e.exec("/document/",{})).toEqual({path:""})}),it("should use the optional regexp with curly brace placeholders"
,function(){var e=new UrlMatcher("/users/:id/details/{type}/{repeat:[0-9]+}?from&to");expect(e.exec("/users/123/details/what/thisShouldBeDigits"
,{})).toBeNull()}),it("should treat the URL as already decoded and does not decode it further",function(
){expect((new UrlMatcher("/users/:id")).exec("/users/100%25",{})).toEqual({id:"100%25"})}),it("should throw on unbalanced capture list"
,function(){var e={"/url/{matchedParam:([a-z]+)}/child/{childParam}":"/url/someword/child/childParam"
,"/url/{matchedParam:([a-z]+)}/child/{childParam}?foo":"/url/someword/child/childParam"};angular.forEach
(e,function(e,t){expect(function(){(new UrlMatcher(t)).exec(e,{})}).toThrow("Unbalanced capture group in route '"+
t+"'")});var t={"/url/{matchedParam:[a-z]+}/child/{childParam}":"/url/someword/child/childParam","/url/{matchedParam:[a-z]+}/child/{childParam}?foo"
:"/url/someword/child/childParam"};angular.forEach(t,function(e,t){expect(function(){(new UrlMatcher(
t)).exec(e,{})}).not.toThrow()})})}),describe(".format()",function(){it("should reconstitute the URL"
,function(){var e=new UrlMatcher("/users/:id/details/{type}/{repeat:[0-9]+}?from"),t={id:"123",type:"default"
,repeat:444,ignored:"value",from:"1970"};expect(e.format(t)).toEqual("/users/123/details/default/444?from=1970"
)}),it("should encode URL parameters",function(){expect((new UrlMatcher("/users/:id")).format({id:"100%"
})).toEqual("/users/100%25")}),it("encodes URL parameters with hashes",function(){var e=new UrlMatcher
("/users/:id#:section"),t={id:"bob",section:"contact-details"};expect(e.format(t)).toEqual("/users/bob#contact-details"
)})}),describe(".concat()",function(){it("should concatenate matchers",function(){var e=(new UrlMatcher
("/users/:id/details/{type}?from")).concat("/{repeat:[0-9]+}?to"),t=e.parameters();expect(t.length).toBe
(5),expect(t).toContain("id"),expect(t).toContain("type"),expect(t).toContain("repeat"),expect(t).toContain
("from"),expect(t).toContain("to")}),it("should return a new matcher",function(){var e=new UrlMatcher
("/users/:id/details/{type}?from"),t=e.concat("/{repeat:[0-9]+}?to");expect(t).toNotBe(e)}),it("should respect $urlMatcherFactoryProvider.strictMode"
,function(){var t=new UrlMatcher("/");e.strictMode(!1),t=t.concat("foo"),expect(t.exec("/foo")).toEqual
({}),expect(t.exec("/foo/")).toEqual({})}),it("should respect $urlMatcherFactoryProvider.caseInsensitive"
,function(){var t=new UrlMatcher("/");e.caseInsensitive(!0),t=t.concat("foo"),expect(t.exec("/foo")).
toEqual({}),expect(t.exec("/FOO")).toEqual({})}),it("should generate/match params in the proper order"
,function(){var e=new UrlMatcher("/foo?queryparam");e=e.concat("/bar/:pathparam"),expect(e.exec("/foo/bar/pathval"
,{queryparam:"queryval"})).toEqual({pathparam:"pathval",queryparam:"queryval"})})}),describe("multivalue-query-parameters"
,function(){it("should handle .is() for an array of values",inject(function(e){var t=new UrlMatcher("/foo?{param1:int}"
);expect(t.params.param1.type.is([1,2,3])).toBe(!0),expect(t.params.param1.type.is([1,"2",3])).toBe(!1
)})),it("should handle .equals() for two arrays of values",inject(function(e){var t=new UrlMatcher("/foo?{param1:int}&{param2:date}"
);expect(t.params.param1.type.equals([1,2,3],[1,2,3])).toBe(!0),expect(t.params.param1.type.equals([1
,2,3],[1,2])).toBe(!1),expect(t.params.param2.type.equals([new Date(2014,11,15),new Date(2014,10,15)]
,[new Date(2014,11,15),new Date(2014,10,15)])).toBe(!0),expect(t.params.param2.type.equals([new Date(2014
,11,15),new Date(2014,9,15)],[new Date(2014,11,15),new Date(2014,10,15)])).toBe(!1)})),it("should conditionally be wrapped in an array by default"
,inject(function(e){var t=new UrlMatcher("/foo?param1");expect(t.format({param1:undefined})).toBe("/foo"
),expect(t.format({param1:[]})).toBe("/foo"),expect(t.format({param1:""})).toBe("/foo"),expect(t.format
({param1:"1"})).toBe("/foo?param1=1"),expect(t.format({param1:["1"]})).toBe("/foo?param1=1"),expect(t
.format({param1:["1","2"]})).toBe("/foo?param1=1&param1=2"),expect(t.exec("/foo")).toEqual({param1:undefined
}),expect(t.exec("/foo",{})).toEqual({param1:undefined}),expect(t.exec("/foo",{param1:""})).toEqual({
param1:undefined}),expect(t.exec("/foo",{param1:"1"})).toEqual({param1:"1"}),expect(t.exec("/foo",{param1
:["1","2"]})).toEqual({param1:["1","2"]}),e.url("/foo"),expect(t.exec(e.path(),e.search())).toEqual({
param1:undefined}),e.url("/foo?param1=bar"),expect(t.exec(e.path(),e.search())).toEqual({param1:"bar"
}),e.url("/foo?param1=bar&param1=baz"),angular.isArray(e.search())&&expect(t.exec(e.path(),e.search()
)).toEqual({param1:["bar","baz"]}),expect(t.format({})).toBe("/foo"),expect(t.format({param1:undefined
})).toBe("/foo"),expect(t.format({param1:""})).toBe("/foo"),expect(t.format({param1:"bar"})).toBe("/foo?param1=bar"
),expect(t.format({param1:["bar"]})).toBe("/foo?param1=bar"),expect(t.format({param1:["bar","baz"]}))
.toBe("/foo?param1=bar&param1=baz")})),it("should be wrapped in an array if array: true",inject(function(
e){var t=new UrlMatcher("/foo?param1",{params:{param1:{array:!0}}});expect(t.format({param1:undefined
})).toBe("/foo"),expect(t.format({param1:[]})).toBe("/foo"),expect(t.format({param1:""})).toBe("/foo"
),expect(t.format({param1:"1"})).toBe("/foo?param1=1"),expect(t.format({param1:["1"]})).toBe("/foo?param1=1"
),expect(t.format({param1:["1","2"]})).toBe("/foo?param1=1&param1=2"),expect(t.exec("/foo")).toEqual(
{param1:undefined}),expect(t.exec("/foo",{})).toEqual({param1:undefined}),expect(t.exec("/foo",{param1
:""})).toEqual({param1:undefined}),expect(t.exec("/foo",{param1:"1"})).toEqual({param1:["1"]}),expect
(t.exec("/foo",{param1:["1","2"]})).toEqual({param1:["1","2"]}),e.url("/foo"),expect(t.exec(e.path(),
e.search())).toEqual({param1:undefined}),e.url("/foo?param1=bar"),expect(t.exec(e.path(),e.search()))
.toEqual({param1:["bar"]}),e.url("/foo?param1=bar&param1=baz"),angular.isArray(e.search())&&expect(t.
exec(e.path(),e.search())).toEqual({param1:["bar","baz"]}),expect(t.format({})).toBe("/foo"),expect(t
.format({param1:undefined})).toBe("/foo"),expect(t.format({param1:""})).toBe("/foo"),expect(t.format(
{param1:"bar"})).toBe("/foo?param1=bar"),expect(t.format({param1:["bar"]})).toBe("/foo?param1=bar"),expect
(t.format({param1:["bar","baz"]})).toBe("/foo?param1=bar&param1=baz")})),it("should be wrapped in an array if paramname looks like param[]"
,inject(function(e){var t=new UrlMatcher("/foo?param1[]");expect(t.exec("/foo")).toEqual({}),e.url("/foo?param1[]=bar"
),expect(t.exec(e.path(),e.search())).toEqual({"param1[]":["bar"]}),expect(t.format({"param1[]":"bar"
})).toBe("/foo?param1[]=bar"),expect(t.format({"param1[]":["bar"]})).toBe("/foo?param1[]=bar"),e.url("/foo?param1[]=bar&param1[]=baz"
),angular.isArray(e.search())&&expect(t.exec(e.path(),e.search())).toEqual({"param1[]":["bar","baz"]}
),expect(t.format({"param1[]":["bar","baz"]})).toBe("/foo?param1[]=bar&param1[]=baz")})),it("should not be wrapped by ui-router into an array if array: false"
,inject(function(e){var t=new UrlMatcher("/foo?param1",{params:{param1:{array:!1}}});expect(t.exec("/foo"
)).toEqual({}),e.url("/foo?param1=bar"),expect(t.exec(e.path(),e.search())).toEqual({param1:"bar"}),expect
(t.format({param1:"bar"})).toBe("/foo?param1=bar"),expect(t.format({param1:["bar"]})).toBe("/foo?param1=bar"
),e.url("/foo?param1=bar&param1=baz"),angular.isArray(e.search())&&expect(t.exec(e.path(),e.search())
).toEqual({param1:"bar,baz"}),expect(t.format({param1:["bar","baz"]})).toBe("/foo?param1=bar%2Cbaz")}
))}),describe("multivalue-path-parameters",function(){it("should behave as a single-value by default"
,inject(function(e){var t=new UrlMatcher("/foo/:param1");expect(t.exec("/foo/")).toEqual({param1:""})
,expect(t.exec("/foo/bar")).toEqual({param1:"bar"}),expect(t.format({param1:"bar"})).toBe("/foo/bar")
,expect(t.format({param1:["bar","baz"]})).toBe("/foo/bar%2Cbaz")})),it("should be split on - in url and wrapped in an array if array: true"
,inject(function(e){var t=new UrlMatcher("/foo/:param1",{params:{param1:{array:!0}}});expect(t.exec("/foo/"
)).toEqual({param1:undefined}),expect(t.exec("/foo/bar")).toEqual({param1:["bar"]}),e.url("/foo/bar-baz"
),expect(t.exec(e.url())).toEqual({param1:["bar","baz"]}),expect(t.format({param1:[]})).toEqual("/foo/"
),expect(t.format({param1:["bar"]})).toEqual("/foo/bar"),expect(t.format({param1:["bar","baz"]})).toEqual
("/foo/bar-baz")})),it("should behave similar to multi-value query params",inject(function(e){var t=new 
UrlMatcher("/foo/:param1[]");expect(t.format({"param1[]":undefined})).toBe("/foo/"),expect(t.format({"param1[]"
:[]})).toBe("/foo/"),expect(t.format({"param1[]":""})).toBe("/foo/"),expect(t.format({"param1[]":"1"}
)).toBe("/foo/1"),expect(t.format({"param1[]":["1"]})).toBe("/foo/1"),expect(t.format({"param1[]":["1"
,"2"]})).toBe("/foo/1-2"),expect(t.exec("/foo/")).toEqual({"param1[]":undefined}),expect(t.exec("/foo/1"
)).toEqual({"param1[]":["1"]}),expect(t.exec("/foo/1-2")).toEqual({"param1[]":["1","2"]}),e.url("/foo/"
),expect(t.exec(e.path(),e.search())).toEqual({"param1[]":undefined}),e.url("/foo/bar"),expect(t.exec
(e.path(),e.search())).toEqual({"param1[]":["bar"]}),e.url("/foo/bar-baz"),expect(t.exec(e.path(),e.search
())).toEqual({"param1[]":["bar","baz"]}),expect(t.format({})).toBe("/foo/"),expect(t.format({"param1[]"
:undefined})).toBe("/foo/"),expect(t.format({"param1[]":""})).toBe("/foo/"),expect(t.format({"param1[]"
:"bar"})).toBe("/foo/bar"),expect(t.format({"param1[]":["bar"]})).toBe("/foo/bar"),expect(t.format({"param1[]"
:["bar","baz"]})).toBe("/foo/bar-baz")})),it("should be split on - in url and wrapped in an array if paramname looks like param[]"
,inject(function(e){var t=new UrlMatcher("/foo/:param1[]");expect(t.exec("/foo/")).toEqual({"param1[]"
:undefined}),expect(t.exec("/foo/bar")).toEqual({"param1[]":["bar"]}),expect(t.exec("/foo/bar-baz")).
toEqual({"param1[]":["bar","baz"]}),expect(t.format({"param1[]":[]})).toEqual("/foo/"),expect(t.format
({"param1[]":["bar"]})).toEqual("/foo/bar"),expect(t.format({"param1[]":["bar","baz"]})).toEqual("/foo/bar-baz"
)})),it("should allow path param arrays with '-' in the values",inject(function(e){var t=new UrlMatcher
("/foo/:param1[]");expect(t.exec("/foo/")).toEqual({"param1[]":undefined}),expect(t.exec("/foo/bar\\-"
)).toEqual({"param1[]":["bar-"]}),expect(t.exec("/foo/bar\\--\\-baz")).toEqual({"param1[]":["bar-","-baz"
]}),expect(t.format({"param1[]":[]})).toEqual("/foo/"),expect(t.format({"param1[]":["bar-"]})).toEqual
("/foo/bar%5C%2D"),expect(t.format({"param1[]":["bar-","-baz"]})).toEqual("/foo/bar%5C%2D-%5C%2Dbaz")
,e.url(t.format({"param1[]":["bar-","-baz"]})),expect(t.exec(e.path(),e.search())).toEqual({"param1[]"
:["bar-","-baz"]}),e.url(t.format({"param1[]":["%2C%20%5C%2C","-baz"]})),expect(t.exec(e.path(),e.search
())).toEqual({"param1[]":["%2C%20%5C%2C","-baz"]})}))})}),describe("urlMatcherFactoryProvider",function(
){describe(".type()",function(){var e;beforeEach(module("ui.router.util",function(t){t.type("myType",
{},function(){return{decode:function(){return"decoded"}}}),e=new UrlMatcher("/test?{foo:myType}")})),
it("should handle arrays properly with config-time custom type definitions",inject(function(t){expect
(e.exec("/test",{foo:"1"})).toEqual({foo:"decoded"}),expect(e.exec("/test",{foo:["1","2"]})).toEqual(
{foo:["decoded","decoded"]})}))})}),describe("urlMatcherFactory",function(){var e;beforeEach(module("ui.router.util"
)),beforeEach(inject(function(t){e=t})),it("compiles patterns",function(){var t=e.compile("/hello/world"
);expect(t instanceof UrlMatcher).toBe(!0)}),it("recognizes matchers",function(){expect(e.isMatcher(new 
UrlMatcher("/"))).toBe(!0);var t={format:angular.noop,exec:angular.noop,concat:angular.noop,validates
:angular.noop,parameters:angular.noop};expect(e.isMatcher(t)).toBe(!0)}),it("should handle case sensitive URL by default"
,function(){expect(e.compile("/hello/world").exec("/heLLo/WORLD")).toBeNull()}),it("should handle case insensistive URL"
,function(){e.caseInsensitive(!0),expect(e.compile("/hello/world").exec("/heLLo/WORLD")).toEqual({})}
),describe("typed parameters",function(){it("should accept object definitions",function(){var t={encode
:function(){},decode:function(){}};e.type("myType",t),expect(e.type("myType").encode).toBe(t.encode)}
),it("should reject duplicate definitions",function(){e.type("myType",{encode:function(){},decode:function(
){}}),expect(function(){e.type("myType",{})}).toThrow("A type named 'myType' has already been defined."
)}),it("should accept injected function definitions",inject(function(t){e.type("myType",{},function(e
){return{decode:function(){return e}}}),expect(e.type("myType").decode()).toBe(t)})),it("should accept annotated function definitions"
,inject(function(t){e.type("myAnnotatedType",{},["$stateParams",function(e){return{decode:function(){
return e}}}]),expect(e.type("myAnnotatedType").decode()).toBe(t)})),it("should match built-in types",
function(){var e=new UrlMatcher("/{foo:int}/{flag:bool}");expect(e.exec("/1138/1")).toEqual({foo:1138
,flag:!0}),expect(e.format({foo:5,flag:!0})).toBe("/5/1")}),it("should encode/decode dates",function(
){var e=new UrlMatcher("/calendar/{date:date}"),t=e.exec("/calendar/2014-03-26"),n=new Date(2014,2,26
);expect(t.date instanceof Date).toBe(!0),expect(t.date.toUTCString()).toEqual(n.toUTCString()),expect
(e.format({date:n})).toBe("/calendar/2014-03-26")}),it("should encode/decode arbitrary objects to json"
,function(){var e=new UrlMatcher("/state/{param1:json}/{param2:json}"),t={param1:{foo:"huh",count:3},
param2:{foo:"wha",count:5}},n='{"foo":"huh","count":3}',r='{"foo":"wha","count":5}';expect(e.format(t
)).toBe("/state/"+encodeURIComponent(n)+"/"+encodeURIComponent(r)),expect(e.exec("/state/"+n+"/"+r)).
toEqual(t)}),it("should not match invalid typed parameter values",function(){var e=new UrlMatcher("/users/{id:int}"
);expect(e.exec("/users/1138").id).toBe(1138),expect(e.exec("/users/alpha")).toBeNull(),expect(e.format
({id:1138})).toBe("/users/1138"),expect(e.format({id:"alpha"})).toBeNull()}),it("should automatically handle multiple search param values"
,inject(function(e){var t=new UrlMatcher("/foo/{fooid:int}?{bar:int}");e.url("/foo/5?bar=1"),expect(t
.exec(e.path(),e.search())).toEqual({fooid:5,bar:1}),expect(t.format({fooid:5,bar:1})).toEqual("/foo/5?bar=1"
),e.url("/foo/5?bar=1&bar=2&bar=3"),angular.isArray(e.search())&&expect(t.exec(e.path(),e.search())).
toEqual({fooid:5,bar:[1,2,3]}),expect(t.format({fooid:5,bar:[1,2,3]})).toEqual("/foo/5?bar=1&bar=2&bar=3"
),t.format()})),it("should allow custom types to handle multiple search param values manually",inject
(function(t){e.type("custArray",{encode:function(e){return e.join("-")},decode:function(e){return angular
.isArray(e)?e:e.split(/-/)},equals:angular.equals,is:angular.isArray});var n=new UrlMatcher("/foo?{bar:custArray}"
,{params:{bar:{array:!1}}});t.url("/foo?bar=fox"),expect(n.exec(t.path(),t.search())).toEqual({bar:["fox"
]}),expect(n.format({bar:["fox"]})).toEqual("/foo?bar=fox"),t.url("/foo?bar=quick-brown-fox"),expect(
n.exec(t.path(),t.search())).toEqual({bar:["quick","brown","fox"]}),expect(n.format({bar:["quick","brown"
,"fox"]})).toEqual("/foo?bar=quick-brown-fox")}))}),describe("optional parameters",function(){it("should match with or without values"
,function(){var e=new UrlMatcher("/users/{id:int}",{params:{id:{value:null,squash:!0}}});expect(e.exec
("/users/1138")).toEqual({id:1138}),expect(e.exec("/users/").id).toBeNull(),expect(e.exec("/users").id
).toBeNull()}),it("should correctly match multiple",function(){var e=new UrlMatcher("/users/{id:int}/{state:[A-Z]+}"
,{params:{id:{value:null,squash:!0},state:{value:null,squash:!0}}});expect(e.exec("/users/1138")).toEqual
({id:1138,state:null}),expect(e.exec("/users/1138/NY")).toEqual({id:1138,state:"NY"}),expect(e.exec("/users/"
).id).toBeNull(),expect(e.exec("/users/").state).toBeNull(),expect(e.exec("/users").id).toBeNull(),expect
(e.exec("/users").state).toBeNull(),expect(e.exec("/users/NY").state).toBe("NY"),expect(e.exec("/users/NY"
).id).toBeNull()}),it("should correctly format with or without values",function(){var e=new UrlMatcher
("/users/{id:int}",{params:{id:{value:null}}});expect(e.format()).toBe("/users/"),expect(e.format({id
:1138})).toBe("/users/1138")}),it("should correctly format multiple",function(){var e=new UrlMatcher("/users/{id:int}/{state:[A-Z]+}"
,{params:{id:{value:null,squash:!0},state:{value:null,squash:!0}}});expect(e.format()).toBe("/users/"
),expect(e.format({id:1138})).toBe("/users/1138/"),expect(e.format({state:"NY"})).toBe("/users/NY"),expect
(e.format({id:1138,state:"NY"})).toBe("/users/1138/NY")}),it("should match in between static segments"
,function(){var e=new UrlMatcher("/users/{user:int}/photos",{params:{user:{value:5,squash:!0}}});expect
(e.exec("/users/photos").user).toBe(5),expect(e.exec("/users/6/photos").user).toBe(6),expect(e.format
()).toBe("/users/photos"),expect(e.format({user:1138})).toBe("/users/1138/photos")}),it("should correctly format with an optional followed by a required parameter"
,function(){var e=new UrlMatcher("/home/:user/gallery/photos/:photo",{params:{user:{value:null,squash
:!0},photo:undefined}});expect(e.format({photo:12})).toBe("/home/gallery/photos/12"),expect(e.format(
{user:1138,photo:13})).toBe("/home/1138/gallery/photos/13")}),describe("default values",function(){it
("should populate if not supplied in URL",function(){var e=new UrlMatcher("/users/{id:int}/{test}",{params
:{id:{value:0,squash:!0},test:{value:"foo",squash:!0}}});expect(e.exec("/users")).toEqual({id:0,test:"foo"
}),expect(e.exec("/users/2")).toEqual({id:2,test:"foo"}),expect(e.exec("/users/bar")).toEqual({id:0,test
:"bar"}),expect(e.exec("/users/2/bar")).toEqual({id:2,test:"bar"}),expect(e.exec("/users/bar/2")).toBeNull
()}),it("should allow shorthand definitions",function(){var e=new UrlMatcher("/foo/:foo",{params:{foo
:"bar"}});expect(e.exec("/foo/")).toEqual({foo:"bar"})}),it("should populate query params",function()
{var e={order:"name",limit:25,page:1},t=new UrlMatcher("/foo?order&limit&page",{params:e});expect(t.exec
("/foo")).toEqual(e)}),it("should allow function-calculated values",function(){function e(){return"Value from bar()"
}var t=new UrlMatcher("/foo/:bar",{params:{bar:e}});expect(t.exec("/foo/").bar).toBe("Value from bar()"
),t=new UrlMatcher("/foo/:bar",{params:{bar:{value:e,squash:!0}}}),expect(t.exec("/foo").bar).toBe("Value from bar()"
),t=new UrlMatcher("/foo?bar",{params:{bar:e}}),expect(t.exec("/foo").bar).toBe("Value from bar()")})
,it("should allow injectable functions",inject(function(e){var t=new UrlMatcher("/users/:user",{params
:{user:function(e){return e.user}}}),n={name:"Bob"};e.user=n,expect(t.exec("/users/").user).toBe(n)})
),describe("squash policy",function(){function t(t){return new UrlMatcher("/user/:userid/gallery/:galleryid/photo/:photoid"
,{params:{userid:{squash:t,value:function(){return e.username}},galleryid:{squash:t,value:"favorites"
}}})}var e={username:"loggedinuser"};it(": true should squash the default value and one slash",inject
(function(e){var n=t(!0),r={userid:"loggedinuser",galleryid:"favorites",photoid:"123"};expect(n.exec("/user/gallery/photo/123"
)).toEqual(r),expect(n.exec("/user//gallery//photo/123")).toEqual(r),expect(n.format(r)).toBe("/user/gallery/photo/123"
);var i={userid:"otheruser",galleryid:"travel",photoid:"987"};expect(n.exec("/user/otheruser/gallery/travel/photo/987"
)).toEqual(i),expect(n.format(i)).toBe("/user/otheruser/gallery/travel/photo/987")})),it(": false should not squash default values"
,inject(function(e){var n=t(!1),r={userid:"loggedinuser",galleryid:"favorites",photoid:"123"};expect(
n.exec("/user/loggedinuser/gallery/favorites/photo/123")).toEqual(r),expect(n.format(r)).toBe("/user/loggedinuser/gallery/favorites/photo/123"
);var i={userid:"otheruser",galleryid:"travel",photoid:"987"};expect(n.exec("/user/otheruser/gallery/travel/photo/987"
)).toEqual(i),expect(n.format(i)).toBe("/user/otheruser/gallery/travel/photo/987")})),it(": '' should squash the default value to an empty string"
,inject(function(e){var n=t(""),r={userid:"loggedinuser",galleryid:"favorites",photoid:"123"};expect(
n.exec("/user//gallery//photo/123")).toEqual(r),expect(n.format(r)).toBe("/user//gallery//photo/123")
;var i={userid:"otheruser",galleryid:"travel",photoid:"987"};expect(n.exec("/user/otheruser/gallery/travel/photo/987"
)).toEqual(i),expect(n.format(i)).toBe("/user/otheruser/gallery/travel/photo/987")})),it(": '~' should squash the default value and replace it with '~'"
,inject(function(e){var n=t("~"),r={userid:"loggedinuser",galleryid:"favorites",photoid:"123"};expect
(n.exec("/user//gallery//photo/123")).toEqual(r),expect(n.exec("/user/~/gallery/~/photo/123")).toEqual
(r),expect(n.format(r)).toBe("/user/~/gallery/~/photo/123");var i={userid:"otheruser",galleryid:"travel"
,photoid:"987"};expect(n.exec("/user/otheruser/gallery/travel/photo/987")).toEqual(i),expect(n.format
(i)).toBe("/user/otheruser/gallery/travel/photo/987")}))})})}),describe("strict matching",function(){
it("should match with or without trailing slash",function(){var e=new UrlMatcher("/users",{strict:!1}
);expect(e.exec("/users")).toEqual({}),expect(e.exec("/users/")).toEqual({})}),it("should not match multiple trailing slashes"
,function(){var e=new UrlMatcher("/users",{strict:!1});expect(e.exec("/users//")).toBeNull()}),it("should match when defined with parameters"
,function(){var e=new UrlMatcher("/users/{name}",{strict:!1,params:{name:{value:null}}});expect(e.exec
("/users/")).toEqual({name:null}),expect(e.exec("/users/bob")).toEqual({name:"bob"}),expect(e.exec("/users/bob/"
)).toEqual({name:"bob"}),expect(e.exec("/users/bob//")).toBeNull()})})});