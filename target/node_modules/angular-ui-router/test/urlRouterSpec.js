describe("UrlRouter",function(){var e,t,n,r,i,s;describe("provider",function(){beforeEach(function(){
angular.module("ui.router.router.test",function(){}).config(function(t){t.deferIntercept(),e=t}),module
("ui.router.router","ui.router.router.test"),inject(function(t,i,o){s=t.$new(),r=i,n=o.invoke(e.$get)
})}),it("should throw on non-function rules",function(){expect(function(){e.rule(null)}).toThrow("'rule' must be a function"
),expect(function(){e.otherwise(null)}).toThrow("'rule' must be a function")}),it("should allow location changes to be deferred"
,inject(function(t,n,r){var i=[];e.rule(function(e,t){i.push(t.path())}),n.path("/foo"),r.$broadcast("$locationChangeSuccess"
),expect(i).toEqual([]),t.listen(),r.$broadcast("$locationChangeSuccess"),expect(i).toEqual(["/foo"])
}))}),describe("service",function(){beforeEach(function(){angular.module("ui.router.router.test",function(
){}).config(function(n,r){e=n,t=r,e.rule(function(e,t){var n=t.path();return/baz/.test(n)?n.replace("baz"
,"b4z"):!1}).when("/foo/:param",function(e){i=["/foo/:param",e]}).when("/bar",function(e){i=["/bar",e
]})}),module("ui.router.router","ui.router.router.test"),inject(function(t,i,o){s=t.$new(),r=i,n=o.invoke
(e.$get)})}),it("should execute rewrite rules",function(){r.path("/foo"),s.$emit("$locationChangeSuccess"
),expect(r.path()).toBe("/foo"),r.path("/baz"),s.$emit("$locationChangeSuccess"),expect(r.path()).toBe
("/b4z")}),it("should keep otherwise last",function(){e.otherwise("/otherwise"),r.path("/lastrule"),s
.$emit("$locationChangeSuccess"),expect(r.path()).toBe("/otherwise"),e.when("/lastrule",function(e){i=
["/lastrule",e]}),r.path("/lastrule"),s.$emit("$locationChangeSuccess"),expect(r.path()).toBe("/lastrule"
)}),it("should allow custom URL matchers",function(){var t={url:{exec:function(){},format:function(){
},concat:function(){},validates:function(){},parameters:function(){}},handler:function(){}};spyOn(t.url
,"exec").andReturn({}),spyOn(t.url,"format").andReturn("/foo-bar"),spyOn(t,"handler").andReturn(!0),e
.when(t.url,t.handler),s.$broadcast("$locationChangeSuccess"),s.$apply(),expect(t.url.exec).toHaveBeenCalled
(),expect(t.url.format).not.toHaveBeenCalled(),expect(t.handler).toHaveBeenCalled()}),it("can be cancelled by preventDefault() in $locationChangeSuccess"
,inject(function(){var e;r.path("/baz"),s.$on("$locationChangeSuccess",function(t){t.preventDefault()
,e=!0}),s.$emit("$locationChangeSuccess"),expect(e).toBeTruthy(),expect(r.path()).toBe("/baz")})),it("can be deferred and updated in $locationChangeSuccess"
,inject(function(e,t){var n;r.path("/baz"),s.$on("$locationChangeSuccess",function(r){r.preventDefault
(),n=!0,t(e.sync,2e3)}),s.$emit("$locationChangeSuccess"),t.flush(),expect(n).toBeTruthy(),expect(r.path
()).toBe("/b4z")})),describe("location updates",function(){it("can push location changes",inject(function(
e,t){spyOn(t,"url"),spyOn(t,"replace"),e.push(new UrlMatcher("/hello/:name"),{name:"world"}),expect(t
.url).toHaveBeenCalledWith("/hello/world"),expect(t.replace).not.toHaveBeenCalled()})),it("can push a replacement location"
,inject(function(e,t){spyOn(t,"url"),spyOn(t,"replace"),e.push(new UrlMatcher("/hello/:name"),{name:"world"
},{replace:!0}),expect(t.url).toHaveBeenCalledWith("/hello/world"),expect(t.replace).toHaveBeenCalled
()})),it("can push location changes with no parameters",inject(function(e,t){spyOn(t,"url"),e.push(new 
UrlMatcher("/hello/:name")),expect(t.url).toHaveBeenCalledWith("/hello/")})),it("can read and sync a copy of location URL"
,inject(function(e,t){t.url("/old"),spyOn(t,"url").andCallThrough(),e.update(!0),expect(t.url).toHaveBeenCalled
(),t.url("/new"),e.update(),expect(t.url()).toBe("/old")}))}),describe("URL generation",function(){it
("should return null when UrlMatcher rejects parameters",inject(function(e,t){t.type("custom",{is:function(
e){return e===1138}});var n=new UrlMatcher("/foo/{param:custom}");expect(e.href(n,{param:1138})).toBe
("#/foo/1138"),expect(e.href(n,{param:5})).toBeNull()})),it("should handle the new html5Mode object config from Angular 1.3"
,inject(function(e){t.html5Mode({enabled:!1}),expect(e.href(new UrlMatcher("/hello"))).toBe("#/hello"
)}))})})});