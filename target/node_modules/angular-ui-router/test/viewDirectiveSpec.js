describe("uiView",function(){var e,t,n;beforeEach(function(){var e=["ui.router"];try{angular.module("ngAnimate"
),e.push("ngAnimate","ngAnimateMock")}catch(t){angular.module("mock.animate",[]).value("$animate",null
),module("mock.animate")}angular.module("ui.router.test",e),module("ui.router.test")}),beforeEach(module
(function(e){e.decorator("$uiViewScroll",function(){return jasmine.createSpy("$uiViewScroll")})}));var r=
{template:"aState template"},i={template:"bState template"},s={views:{cview:{template:"cState cview template"
}}},o={views:{dview1:{template:"dState dview1 template"},dview2:{template:"dState dview2 template"}}}
,u={template:'<div ui-view="eview" class="eview"></div>'},a={views:{eview:{template:"fState eview template"
}}},f={template:'<div ui-view="inner"><span>{{content}}</span></div>'},l={views:{inner:{template:"hState inner template"
}}},c={template:'<div ui-view><ul><li ng-repeat="item in items">{{item}}</li></ul></div>'},h={template
:"jState"},p={controller:function(){this.someProperty="value"},controllerAs:"vm"},d={views:{view1:{template
:"view1"},view2:{template:"view2"},view3:{template:"view3"}}};beforeEach(module(function(e){e.state("a"
,r).state("b",i).state("c",s).state("d",o).state("e",u).state("e.f",a).state("g",f).state("g.h",l).state
("i",c).state("j",h).state("k",p).state("l",d)})),beforeEach(inject(function(r,i){e=r.$new(),t=i,n=angular
.element("<div>")})),describe("linking ui-directive",function(){it("anonymous ui-view should be replaced with the template of the current $state"
,inject(function(i,s){n.append(t("<div><ui-view></ui-view></div>")(e)),expect(n.find("ui-view").text(
)).toBe(""),i.transitionTo(r),s.flush(),expect(n.find("ui-view").text()).toBe(r.template)})),it("named ui-view should be replaced with the template of the current $state"
,inject(function(r,i){n.append(t('<div><ui-view name="cview"></ui-view></div>')(e)),r.transitionTo(s)
,i.flush(),expect(n.find("ui-view").text()).toBe(s.views.cview.template)})),it("ui-view should be updated after transition to another state"
,inject(function(s,o){n.append(t("<div><ui-view></ui-view></div>")(e)),expect(n.find("ui-view").text(
)).toBe(""),s.transitionTo(r),o.flush(),expect(n.find("ui-view").text()).toBe(r.template),s.transitionTo
(i),o.flush(),expect(n.find("ui-view").text()).toBe(i.template)})),it("should handle NOT nested ui-views"
,inject(function(r,i){n.append(t('<div><ui-view name="dview1" class="dview1"></ui-view><ui-view name="dview2" class="dview2"></ui-view></div>'
)(e)),expect(n.find("ui-view").eq(0).text()).toBe(""),expect(n.find("ui-view").eq(1).text()).toBe("")
,r.transitionTo(o),i.flush(),expect(n.find("ui-view").eq(0).text()).toBe(o.views.dview1.template),expect
(n.find("ui-view").eq(1).text()).toBe(o.views.dview2.template)})),it("should handle nested ui-views (testing two levels deep)"
,inject(function(r,i){t(n.append("<div><ui-view></ui-view></div>"))(e),expect(n.find("ui-view").text(
)).toBe(""),r.transitionTo(a),i.flush(),expect(n.find("ui-view").text()).toBe(a.views.eview.template)
}))}),describe("handling initial view",function(){it("initial view should be compiled if the view is empty"
,inject(function(r,i){var s="inner content";e.content=s,n.append(t("<div><ui-view></ui-view></div>")(
e)),r.transitionTo(f),i.flush(),expect(n.find("ui-view").text()).toBe(s)})),it("initial view should be put back after removal of the view"
,inject(function(r,i){var s="inner content";e.content=s,n.append(t("<div><ui-view></ui-view></div>")(
e)),r.go(l),i.flush(),expect(n.find("ui-view").text()).toBe(l.views.inner.template),r.go(f),i.flush()
,expect(n.find("ui-view").text()).toBe(s)})),it("initial view should be transcluded once to prevent breaking other directives"
,inject(function(r,i){e.items=["I","am","a","list","of","items"],n.append(t("<div><ui-view></ui-view></div>"
)(e)),r.transitionTo(c),i.flush(),expect(n.find("li").length).toBe(e.items.length),r.transitionTo(h),
i.flush(),expect(n.find("ui-view").text()).toBe(h.template),r.transitionTo(c),i.flush(),expect(n.find
("li").length).toBe(e.items.length),e.$apply(function(){e.items.push(".","Working?")}),expect(n.find("li"
).length).toBe(e.items.length)}))}),describe("autoscroll attribute",function(){it("should NOT autoscroll when unspecified"
,inject(function(i,s,o,u){n.append(t("<div><ui-view></ui-view></div>")(e)),i.transitionTo(r),s.flush(
),u&&u.triggerCallbacks(),expect(o).not.toHaveBeenCalled()})),it("should autoscroll when expression is missing"
,inject(function(i,s,o,u){n.append(t("<div><ui-view autoscroll></ui-view></div>")(e)),i.transitionTo(
r),s.flush(),u&&u.triggerCallbacks(),expect(o).toHaveBeenCalledWith(n.find("span").parent())})),it("should autoscroll based on expression"
,inject(function(s,o,u,a){e.doScroll=!1,n.append(t('<div><ui-view autoscroll="doScroll"></ui-view></div>'
)(e)),s.transitionTo(r),o.flush(),a&&a.triggerCallbacks(),expect(u).not.toHaveBeenCalled(),e.doScroll=!0
,s.transitionTo(i),o.flush(),a&&a.triggerCallbacks();var f,l=-1,c=n.find("ui-view");while(l++<c.length
){var h=angular.element(c[l]);h.text()===i.template&&(f=h)}expect(u).toHaveBeenCalledWith(f)}))}),it("should instantiate a controller with controllerAs"
,inject(function(r,i){n.append(t("<div><ui-view>{{vm.someProperty}}</ui-view></div>")(e)),r.transitionTo
(p),i.flush(),expect(n.text()).toBe("value")})),describe("play nicely with other directives",function(
){it("should work with ngIf",inject(function(t,i,s){if(angular.version.full==="1.0.8")return;e.someBoolean=!1
,n.append(s('<div ng-if="someBoolean"><ui-view></ui-view></div>')(e)),t.transitionTo(r),i.flush(),expect
(n.find("ui-view").length).toBe(0),e.someBoolean=!0,e.$digest(),expect(n.find("ui-view").text()).toBe
(r.template),e.someBoolean=!1,e.$digest(),expect(n.find("ui-view").length).toBe(0),e.someBoolean=!0,e
.$digest(),expect(n.find("ui-view").text()).toBe(r.template)})),it("should work with ngClass",inject(
function(t,r,i){e.showClass=!1,n.append(i("<div><ui-view ng-class=\"{'someClass': showClass}\"></ui-view></div>"
)(e)),expect(n.find("ui-view")).not.toHaveClass("someClass"),e.showClass=!0,e.$digest(),expect(n.find
("ui-view")).toHaveClass("someClass"),e.showClass=!1,e.$digest(),expect(n.find("ui-view")).not.toHaveClass
("someClass")})),describe("working with ngRepeat",function(){if(["1.0.8","1.1.5"].indexOf(angular.version
.full)!==-1)return;it("should have correct number of uiViews",inject(function(t,r,i){n.append(i('<div><ui-view ng-repeat="view in views" name="{{view}}"></ui-view></div>'
)(e)),expect(n.find("ui-view").length).toBe(0),e.views=["view1","view2","view3"],e.$digest(),expect(n
.find("ui-view").length).toBe(e.views.length),e.views.push("view4"),e.$digest(),expect(n.find("ui-view"
).length).toBe(e.views.length),e.views.pop(),e.views.pop(),e.$digest(),expect(n.find("ui-view").length
).toBe(e.views.length)})),it("should populate each view with content",inject(function(t,r,i){n.append
(i('<div><ui-view ng-repeat="view in views" name="{{view}}"></ui-view></div>')(e)),t.transitionTo(d),
r.flush(),expect(n.find("ui-view").length).toBe(0),e.views=["view1","view2"],e.$digest();var s=n.find
("ui-view");expect(s.eq(0).text()).toBe(d.views.view1.template),expect(s.eq(1).text()).toBe(d.views.view2
.template),expect(s.eq(2).length).toBe(0),e.views.push("view3"),e.$digest(),s=n.find("ui-view"),expect
(s.eq(0).text()).toBe(d.views.view1.template),expect(s.eq(1).text()).toBe(d.views.view2.template),expect
(s.eq(2).text()).toBe(d.views.view3.template)})),it("should interpolate ui-view names",inject(function(
t,r,i){n.append(i('<div ng-repeat="view in views"><ui-view name="view{{$index + 1}}">hallo</ui-view></div>'
)(e)),t.transitionTo(d),r.flush(),expect(n.find("ui-view").length).toBe(0),e.views=["view1","view2"],
e.$digest();var s=n.find("ui-view");expect(s.eq(0).text()).toBe(d.views.view1.template),expect(s.eq(1
).text()).toBe(d.views.view2.template),expect(s.eq(2).length).toBe(0),e.views.push("view3"),e.$digest
(),s=n.find("ui-view"),expect(s.eq(0).text()).toBe(d.views.view1.template),expect(s.eq(1).text()).toBe
(d.views.view2.template),expect(s.eq(2).text()).toBe(d.views.view3.template)}))})}),describe("AngularJS 1.2.* Animations"
,function(){if(["1.0.8","1.1.5"].indexOf(angular.version.full)!==-1)return;it("should do transition animations"
,inject(function(t,s,o,u){var a="Initial Content",f;n.append(o("<div><ui-view>"+a+"</ui-view></div>")
(e)),f=u.queue.shift(),expect(f.event).toBe("enter"),expect(f.element.text()).toBe(a),t.transitionTo(
r),s.flush(),f=u.queue.shift(),expect(f.event).toBe("enter"),expect(f.element.text()).toBe(r.template
),f=u.queue.shift(),expect(f.event).toBe("leave"),expect(f.element.text()).toBe(a),t.transitionTo(i),
s.flush(),f=u.queue.shift(),expect(f.event).toBe("enter"),expect(f.element.text()).toBe(i.template),f=
u.queue.shift(),expect(f.event).toBe("leave"),expect(f.element.text()).toBe(r.template),expect(u.queue
.length).toBe(0)})),it("should do ngClass animations",inject(function(t,r,i,s){e.classOn=!1;var o="Initial Content"
,u="yay",a;n.append(i("<div><ui-view ng-class=\"{'"+u+"': classOn}\">"+o+"</ui-view></div>")(e)),s.queue
.shift(),e.classOn=!0,e.$digest(),a=s.queue.shift(),expect(a.event).toBe("addClass"),expect(a.element
.text()).toBe(o),e.classOn=!1,e.$digest(),a=s.queue.shift(),expect(a.event).toBe("removeClass"),expect
(a.element.text()).toBe(o),expect(s.queue.length).toBe(0)})),it("should do ngIf animations",inject(function(
t,r,i,s){e.shouldShow=!1;var o="Initial Content",u;n.append(i('<div><ui-view ng-if="shouldShow">'+o+"</ui-view></div>"
)(e)),expect(s.queue.length).toBe(0),e.shouldShow=!0,e.$digest(),u=s.queue.shift(),expect(u.event).toBe
("enter"),expect(u.element.text()).toBe(""),u=s.queue.shift(),expect(u.event).toBe("enter"),expect(u.
element.text()).toBe(o),e.shouldShow=!1,e.$digest(),u=s.queue.shift(),expect(u.event).toBe("leave"),expect
(u.element.text()).toBe(o),expect(s.queue.length).toBe(0)}))})});