beforeEach(function(){function e(e,t){return function(){var n=angular.element(this.actual),r=!0,i=!1;
return angular.forEach(e.split(" "),function(e){r=r&&n.hasClass(e)}),angular.forEach(t.split(" "),function(
e){i=i||n.hasClass(e)}),this.message=function(){return"Expected to have "+e+(t?" and not have "+t+"":""
)+" but had "+n[0].className+"."},r&&!i}}function t(e,t){for(var n=0;n<e.length;n++)if(t===e[n])return n
;return-1}this.addMatchers({toBeInvalid:e("ng-invalid","ng-valid"),toBeValid:e("ng-valid","ng-invalid"
),toBeDirty:e("ng-dirty","ng-pristine"),toBePristine:e("ng-pristine","ng-dirty"),toEqual:function(e){
return this.actual&&this.actual.$$log&&(this.actual=typeof e=="string"?this.actual.toString():this.actual
.toArray()),jasmine.Matchers.prototype.toEqual.call(this,e)},toEqualData:function(e){return angular.equals
(this.actual,e)},toEqualError:function(e){return this.message=function(){var t;return this.actual.message&&
this.actual.name=="Error"?t=toJson(this.actual.message):t=toJson(this.actual),"Expected "+t+" to be an Error with message "+
toJson(e)},this.actual.name=="Error"&&this.actual.message==e},toMatchError:function(e){return this.message=
function(){var t;return this.actual.message&&this.actual.name=="Error"?t=angular.toJson(this.actual.message
):t=angular.toJson(this.actual),"Expected "+t+" to match an Error with message "+angular.toJson(e)},this
.actual.name=="Error"&&e.test(this.actual.message)},toHaveBeenCalledOnce:function(){if(arguments.length>0
)throw new Error("toHaveBeenCalledOnce does not take arguments, use toHaveBeenCalledWith");if(!jasmine
.isSpy(this.actual))throw new Error("Expected a spy, but got "+jasmine.pp(this.actual)+".");return this
.message=function(){var e="Expected spy "+this.actual.identity+" to have been called once, but was ",
t=this.actual.callCount;return[t===0?e+"never called.":e+"called "+t+" times.",e.replace("to have","not to have"
)+"called once."]},this.actual.callCount==1},toHaveBeenCalledOnceWith:function(){var e=jasmine.util.argsToArray
(arguments);if(!jasmine.isSpy(this.actual))throw new Error("Expected a spy, but got "+jasmine.pp(this
.actual)+".");return this.message=function(){return this.actual.callCount!=1?this.actual.callCount==0?
["Expected spy "+this.actual.identity+" to have been called once with "+jasmine.pp(e)+" but it was never called."
,"Expected spy "+this.actual.identity+" not to have been called with "+jasmine.pp(e)+" but it was."]:
["Expected spy "+this.actual.identity+" to have been called once with "+jasmine.pp(e)+" but it was called "+
this.actual.callCount+" times.","Expected spy "+this.actual.identity+" not to have been called once with "+
jasmine.pp(e)+" but it was."]:["Expected spy "+this.actual.identity+" to have been called once with "+
jasmine.pp(e)+" but was called with "+jasmine.pp(this.actual.argsForCall),"Expected spy "+this.actual
.identity+" not to have been called once with "+jasmine.pp(e)+" but was called with "+jasmine.pp(this
.actual.argsForCall)]},this.actual.callCount===1&&this.env.contains_(this.actual.argsForCall,e)},toBeOneOf
:function(){return t(arguments,this.actual)!==-1},toHaveClass:function(e){return this.message=function(
){return"Expected '"+angular.mock.dump(this.actual)+"' to have class '"+e+"'."},this.actual.hasClass?
this.actual.hasClass(e):angular.element(this.actual).hasClass(e)},toMatchText:function(e){return this
.message=function(){return"Expected '"+(this.actual&&this.actual.nodeName)+"' element to have text '"+
e+"'"},this.actual&&this.actual.text&&this.actual.text()===e}})});