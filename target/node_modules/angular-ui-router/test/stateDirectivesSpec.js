describe("uiStateRef",function(){function u(e,t){t=angular.extend({metaKey:!1,ctrlKey:!1,shiftKey:!1,
altKey:!1,button:0},t||{});var n=s.createEvent("MouseEvents");n.initMouseEvent("click",!0,!0,undefined
,0,0,0,0,0,t.ctrlKey,t.altKey,t.shiftKey,t.metaKey,t.button,null),e[0].dispatchEvent(n)}function a(r,
s,o){t=angular.element('<a ui-sref="contacts.item.detail({ id: contact.id })">Details</a>'),n=angular
.element('<a ui-sref="top">Top</a>'),i=r,i.contact={id:5},i.$apply(),s(t)(i),s(n)(i),i.$digest(),e=function(
){try{o.flush()}catch(e){}}}var e,t,n,r,i,s,o;beforeEach(module("ui.router")),beforeEach(module(function(
e,t){o=t,e.state("top",{url:""}).state("contacts",{url:"/contacts",template:'<a ui-sref=".item({ id: 5 })" class="item">Person</a> <ui-view></ui-view>'
}).state("contacts.item",{url:"/:id",template:'<a ui-sref=".detail" class="item-detail">Detail</a> | <a ui-sref="^" class="item-parent">Parent</a> | <ui-view></ui-view>'
}).state("contacts.item.detail",{template:'<div class="title">Detail</div> | <a ui-sref="^" class="item-parent2">Item</a>'
})})),beforeEach(inject(function(e){s=e[0]})),describe("links with promises",function(){it("should update the href when promises on parameters change before scope is applied"
,inject(function(e,n,r){var i=r.defer();t=angular.element('<a ui-sref="contacts.item.detail({ id: contact.id })">Details</a>'
),e.contact=i.promise,i.resolve({id:6}),n(t)(e),e.$digest(),e.contact.$$resolved&&e.contact.$$resolved
.value&&(e.contact=e.contact.$$resolved.value,e.$digest()),expect(t.attr("href")).toBe("#/contacts/6"
)}))}),describe("links",function(){beforeEach(inject(a)),it("should generate the correct href",function(
){expect(t.attr("href")).toBe("#/contacts/5"),expect(n.attr("href")).toBe("#")}),it("should update the href when parameters change"
,function(){expect(t.attr("href")).toBe("#/contacts/5"),i.contact.id=6,i.$apply(),expect(t.attr("href"
)).toBe("#/contacts/6")}),it("should allow multi-line attribute values",inject(function(e,n){t=angular
.element('<a ui-sref="contacts.item.detail({\n	id: $index\n})">Details</a>'),n.$index=3,n.$apply(),e(
t)(n),n.$digest(),expect(t.attr("href")).toBe("#/contacts/3")})),it("should transition states when left-clicked"
,inject(function(n,r,i){expect(n.$current.name).toEqual("top"),u(t),e(),i.flush(),expect(n.current.name
).toEqual("contacts.item.detail"),expect(r).toEqual({id:"5"})})),it("should transition when given a click that contains no data (fake-click)"
,inject(function(n,r,i){expect(n.current.name).toEqual("top"),u(t,{metaKey:undefined,ctrlKey:undefined
,shiftKey:undefined,altKey:undefined,button:undefined}),e(),i.flush(),expect(n.current.name).toEqual("contacts.item.detail"
),expect(r).toEqual({id:"5"})})),it("should not transition states when ctrl-clicked",inject(function(
n,r,i){expect(n.$current.name).toEqual("top"),u(t,{ctrlKey:!0}),e(),i.flush(),expect(n.current.name).
toEqual("top"),expect(r).toEqualData({})})),it("should not transition states when meta-clicked",inject
(function(n,r,i){expect(n.$current.name).toEqual("top"),u(t,{metaKey:!0}),e(),i.flush(),expect(n.current
.name).toEqual("top"),expect(r).toEqualData({})})),it("should not transition states when shift-clicked"
,inject(function(n,r,i){expect(n.$current.name).toEqual("top"),u(t,{shiftKey:!0}),e(),i.flush(),expect
(n.current.name).toEqual("top"),expect(r).toEqualData({})})),it("should not transition states when middle-clicked"
,inject(function(n,r,i){expect(n.$current.name).toEqual("top"),u(t,{button:1}),e(),i.flush(),expect(n
.current.name).toEqual("top"),expect(r).toEqualData({})})),it("should not transition states when element has target specified"
,inject(function(n,r,i){t.attr("target","_blank"),expect(n.$current.name).toEqual("top"),u(t),e(),i.flush
(),expect(n.current.name).toEqual("top"),expect(r).toEqualData({})})),it("should not transition states if preventDefault() is called in click handler"
,inject(function(n,r,i){expect(n.$current.name).toEqual("top"),t.bind("click",function(e){e.preventDefault
()}),u(t),e(),i.flush(),expect(n.current.name).toEqual("top"),expect(r).toEqualData({})})),it("should allow passing params to current state"
,inject(function(e,n,r){r.current.name="contacts.item.detail",t=angular.element('<a ui-sref="{id: $index}">Details</a>'
),n.$index=3,n.$apply(),e(t)(n),n.$digest(),expect(t.attr("href")).toBe("#/contacts/3")})),it("should allow multi-line attribute values when passing params to current state"
,inject(function(e,n,r){r.current.name="contacts.item.detail",t=angular.element('<a ui-sref="{\n	id: $index\n}">Details</a>'
),n.$index=3,n.$apply(),e(t)(n),n.$digest(),expect(t.attr("href")).toBe("#/contacts/3")})),it("should take an object as a parameter and update properly on digest churns"
,inject(function(e,n,i,s){t=angular.element('<div><a ui-sref="contacts.item.detail(urlParams)">Contacts</a></div>'
),r=i(t)(e),e.urlParams={id:1},e.$digest(),expect(angular.element(r[0].querySelector("a")).attr("href"
)).toBe("#/contacts/1"),e.urlParams.id=2,e.$digest(),expect(angular.element(r[0].querySelector("a")).
attr("href")).toBe("#/contacts/2")}))}),describe("links in html5 mode",function(){beforeEach(function(
){o.html5Mode(!0)}),beforeEach(inject(a)),it("should generate the correct href",function(){expect(t.attr
("href")).toBe("/contacts/5"),expect(n.attr("href")).toBe("")}),it("should update the href when parameters change"
,function(){expect(t.attr("href")).toBe("/contacts/5"),i.contact.id=6,i.$apply(),expect(t.attr("href"
)).toBe("/contacts/6")}),it("should transition states when the url is empty",inject(function(t,r,i){u
(n),e(),i.flush(),expect(t.current.name).toEqual("top"),expect(r).toEqualData({})}))}),describe("forms"
,function(){var e,t;beforeEach(inject(function(n,r){e=angular.element('<form ui-sref="contacts.item.detail({ id: contact.id })"></form>'
),t=n,t.contact={id:5},t.$apply(),r(e)(t),t.$digest()})),it("should generate the correct action",function(
){expect(e.attr("action")).toBe("#/contacts/5")})}),describe("relative transitions",function(){beforeEach
(inject(function(e,n,s){s.transitionTo("contacts.item",{id:5}),t=angular.element('<a ui-sref=".detail">Details</a>'
),i=e,i.$apply(),n(t)(i),r=n(angular.element("<div><ui-view></ui-view><div>"))(i),i.$digest()})),it("should work"
,inject(function(e,n,r,i){u(t),i.flush(),r.flush(),expect(e.$current.name).toBe("contacts.item.detail"
),expect(e.params).toEqual({id:"5"})})),it("should resolve states from parent uiView",inject(function(
e,t,n,i){e.transitionTo("contacts"),n.flush();var s=angular.element(r[0].querySelector("a.item"));u(s
),i.flush(),n.flush();var o=angular.element(r[0].querySelector("a.item-detail")),a=angular.element(r[0
].querySelector("a.item-parent"));u(o),i.flush(),n.flush();var f=angular.element(r[0].querySelector("a.item-parent2"
));expect(e.$current.name).toBe("contacts.item.detail"),u(f),i.flush(),n.flush(),expect(e.$current.name
).toBe("contacts.item"),e.transitionTo("contacts.item.detail",{id:3}),u(a),i.flush(),n.flush(),expect
(e.$current.name).toBe("contacts")}))}),describe("transition options",function(){beforeEach(inject(function(
e,n,r){t=angular.element('<a ui-sref="contacts.item.detail({ id: contact.id })" ui-sref-opts="{ reload: true, notify: true }">Details</a>'
),i=e,i.contact={id:5},n(t)(i),i.$digest()})),it("uses allowed transition options",inject(function(e,
n,r){var i;spyOn(r,"go").andCallFake(function(e,t,n){i=n}),u(t),n.flush(),expect(i.reload).toEqual(!0
),expect(i.notify).toBeUndefined()}))})}),describe("uiSrefActive",function(){var e,t,n,r;beforeEach(module
("ui.router")),beforeEach(module(function(e){e.state("top",{url:""}).state("contacts",{url:"/contacts"
,views:{"@":{template:'<a ui-sref=".item({ id: 6 })" ui-sref-active="active">Contacts</a>'}}}).state("contacts.item"
,{url:"/:id"}).state("contacts.item.detail",{url:"/detail/:foo"}).state("contacts.item.edit",{url:"/edit"
})})),beforeEach(inject(function(e){r=e[0]})),it("should update class for sibling uiSref",inject(function(
n,r,i,s){e=angular.element('<div><a ui-sref="contacts.item({ id: 1 })" ui-sref-active="active">Contacts</a><a ui-sref="contacts.item({ id: 2 })" ui-sref-active="active">Contacts</a></div>'
),t=i(e)(n),n.$digest(),expect(angular.element(t[0].querySelector("a")).attr("class")).toBe(""),s.transitionTo
("contacts.item",{id:1}),r.flush(),expect(angular.element(t[0].querySelector("a")).attr("class")).toBe
("active"),s.transitionTo("contacts.item",{id:2}),r.flush(),expect(angular.element(t[0].querySelector
("a")).attr("class")).toBe("")})),it("should match state's parameters",inject(function(n,r,i,s){e=angular
.element('<div><a ui-sref="contacts.item.detail({ foo: \'bar\' })" ui-sref-active="active">Contacts</a></div>'
),t=i(e)(n),n.$digest(),expect(angular.element(t[0].querySelector("a")).attr("class")).toBe(""),s.transitionTo
("contacts.item.detail",{id:5,foo:"bar"}),r.flush(),expect(angular.element(t[0].querySelector("a")).attr
("class")).toBe("active"),s.transitionTo("contacts.item.detail",{id:5,foo:"baz"}),r.flush(),expect(angular
.element(t[0].querySelector("a")).attr("class")).toBe("")})),it("should match on child states",inject
(function(e,n,r,i){t=r('<div><a ui-sref="contacts.item({ id: 1 })" ui-sref-active="active">Contacts</a></div>'
)(e),e.$digest();var s=angular.element(t[0].getElementsByTagName("a")[0]);i.transitionTo("contacts.item.edit"
,{id:1}),n.flush(),expect(s.attr("class")).toMatch(/active/),i.transitionTo("contacts.item.edit",{id:4
}),n.flush(),expect(s.attr("class")).not.toMatch(/active/)})),it("should NOT match on child states when active-equals is used"
,inject(function(e,n,r,i){t=r('<div><a ui-sref="contacts.item({ id: 1 })" ui-sref-active-eq="active">Contacts</a></div>'
)(e),e.$digest();var s=angular.element(t[0].getElementsByTagName("a")[0]);i.transitionTo("contacts.item"
,{id:1}),n.flush(),expect(s.attr("class")).toMatch(/active/),i.transitionTo("contacts.item.edit",{id:1
}),n.flush(),expect(s.attr("class")).not.toMatch(/active/)})),it("should resolve relative state refs"
,inject(function(n,r,i,s){e=angular.element("<section><div ui-view></div></section>"),t=i(e)(n),n.$digest
(),s.transitionTo("contacts"),r.flush(),expect(angular.element(t[0].querySelector("a")).attr("class")
).toBe("ng-scope"),s.transitionTo("contacts.item",{id:6}),r.flush(),expect(angular.element(t[0].querySelector
("a")).attr("class")).toBe("ng-scope active"),s.transitionTo("contacts.item",{id:5}),r.flush(),expect
(angular.element(t[0].querySelector("a")).attr("class")).toBe("ng-scope")}))}),describe("uiView controllers or onEnter handlers"
,function(){var e,t,n,r,i;beforeEach(module("ui.router")),beforeEach(module(function(e){i=0,e.state("aside"
,{url:"/aside",template:'<div class="aside"></div>'}).state("A",{url:"/A",template:'<div class="A" ui-view="fwd"></div>'
}).state("A.fwd",{url:"/fwd",views:{"fwd@A":{template:'<div class="fwd" ui-view>',controller:function(
e){i++<20&&e.current.name=="A.fwd"&&e.go(".nest")}}}}).state("A.fwd.nest",{url:"/nest",template:'<div class="nest"></div>'
})})),beforeEach(inject(function(e){r=e[0]})),it("should not go into an infinite loop when controller uses $state.go"
,inject(function(n,r,s,o){e=angular.element("<div><ui-view></ui-view></div>"),t=s(e)(n),n.$digest(),o
.transitionTo("aside"),r.flush(),expect(t[0].querySelector(".aside")).toBeDefined(),expect(t[0].querySelector
(".fwd")).toBeNull(),o.transitionTo("A"),r.flush(),expect(t[0].querySelector(".A")).not.toBeNull(),expect
(t[0].querySelector(".fwd")).toBeNull(),o.transitionTo("A.fwd"),r.flush(),expect(t[0].querySelector(".A"
)).not.toBeNull(),expect(t[0].querySelector(".fwd")).not.toBeNull(),expect(t[0].querySelector(".nest"
)).not.toBeNull(),expect(i).toBe(1)}))});