module.exports=function(e){function i(t){return e.log.write("% "+t+"\n"),n(t).then(function(t){e.log.
write(t.stderr+t.stdout)},function(n){throw e.log.write(n.stderr+"\n"),"Failed to run '"+t+"'"})}function s
(t,n){var r=t.async();n.then(function(){r()},function(t){e.log.write(t+"\n"),r(!1)})}function o(){return n
("git symbolic-ref HEAD").then(function(e){if(e.stdout.trim()!=="refs/heads/master")throw"Not on master branch, aborting"
;return n("git status --porcelain")}).then(function(e){if(e.stdout.trim()!=="")throw"Working copy is dirty, aborting"
})}require("load-grunt-tasks")(e);var t=require("./files").files;e.initConfig({builddir:"build",pkg:e
.file.readJSON("package.json"),buildtag:"-dev-"+e.template.today("yyyy-mm-dd"),meta:{banner:"/**\n * <%= pkg.description %>\n * @version v<%= pkg.version %><%= buildtag %>\n * @link <%= pkg.homepage %>\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */"
},clean:["<%= builddir %>"],concat:{options:{banner:'<%= meta.banner %>\n\n/* commonjs package manager support (eg componentjs) */\nif (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){\n  module.exports = \'ui.router\';\n}\n\n(function (window, angular, undefined) {\n'
,footer:"})(window, window.angular);"},build:{src:t.src,dest:"<%= builddir %>/<%= pkg.name %>.js"}},uglify
:{options:{banner:"<%= meta.banner %>\n"},build:{files:{"<%= builddir %>/<%= pkg.name %>.min.js":["<banner:meta.banner>"
,"<%= concat.build.dest %>"]}}},release:{files:["<%= pkg.name %>.js","<%= pkg.name %>.min.js"],src:"<%= builddir %>"
,dest:"release"},jshint:{all:["Gruntfile.js","src/*.js","<%= builddir %>/<%= pkg.name %>.js"],options
:{eqnull:!0}},watch:{files:["src/*.js","test/**/*.js"],tasks:["build","karma:background:run"]},connect
:{server:{},sample:{options:{port:5555,keepalive:!0}}},karma:{options:{configFile:"config/karma.js",singleRun
:!0,exclude:[],frameworks:["jasmine"],reporters:"dots",port:8080,colors:!0,autoWatch:!1,autoWatchInterval
:0,browsers:[e.option("browser")||"PhantomJS"]},unit:{browsers:[e.option("browser")||"PhantomJS"]},debug
:{singleRun:!1,background:!1,browsers:[e.option("browser")||"Chrome"]},past:{configFile:"config/karma-1.0.8.js"
},unstable:{configFile:"config/karma-1.1.5.js"},future:{configFile:"config/karma-1.3.0.js"},background
:{background:!0,browsers:[e.option("browser")||"PhantomJS"]},watch:{configFile:"config/karma.js",singleRun
:!1,autoWatch:!0,autoWatchInterval:1}},changelog:{options:{dest:"CHANGELOG.md"}},ngdocs:{options:{dest
:"site",styles:["ngdoc_assets/uirouter-docs.css"],html5Mode:!1,title:"UI Router",startPage:"/api/ui.router"
,navTemplate:"ngdoc_assets/docnav.html"},api:{src:["src/**/*.js"],title:"API Reference"}}}),e.registerTask
("integrate",["build","jshint","karma:unit","karma:past","karma:unstable"]),e.registerTask("default",
["build","jshint","karma:unit"]),e.registerTask("build","Perform a normal build",["concat","uglify"])
,e.registerTask("dist","Perform a clean build",["clean","build"]),e.registerTask("dist-docs","Perform a clean build and generate documentation"
,["dist","ngdocs","widedocs"]),e.registerTask("release","Tag and perform a release",["prepare-release"
,"dist","perform-release"]),e.registerTask("dev","Run dev server and watch for changes",["build","connect:server"
,"karma:background","watch"]),e.registerTask("sample","Run connect server with keepalive:true for sample app development"
,["connect:sample"]),e.registerTask("widedocs","Convert to bootstrap container-fluid",function(){s(this
,i('sed -i.bak -e \'s/class="row"/class="row-fluid"/\' -e \'s/role="main" class="container"/role="main" class="container-fluid"/\' site/index.html'
))}),e.registerTask("publish-pages","Publish a clean build, docs, and sample to github.io",function()
{s(this,o().then(function(){return r.rm("-rf","build"),i("git checkout gh-pages")}).then(function(){return i
("git merge master")}).then(function(){return i("grunt dist-docs")}).then(function(){return i("git commit -a -m 'Automatic gh-pages build'"
)}).then(function(){return i("git checkout master")}))}),e.registerTask("push-pages","Push published pages"
,function(){s(this,o().then(function(){return r.rm("-rf","build"),i("git checkout gh-pages")}).then(function(
){return i("git push origin gh-pages")}).then(function(){return i("git checkout master")}))}),e.registerTask
("prepare-release",function(){var t=e.file.readJSON("bower.json"),r=e.file.readJSON("component.json")
,i=t.version;if(i!=e.config("pkg.version"))throw"Version mismatch in bower.json";if(i!=r.version)throw"Version mismatch in component.json"
;s(this,o().then(function(){return n("git tag -l '"+i+"'")}).then(function(t){if(t.stdout.trim()!==""
)throw"Tag '"+i+"' already exists";e.config("buildtag",""),e.config("builddir","release")}))}),e.registerTask
("perform-release",function(){e.task.requires(["prepare-release","dist"]);var t=e.config("pkg.version"
),n=e.config("builddir");s(this,i("git add '"+n+"'").then(function(){return i("git commit -m 'release "+
t+"'")}).then(function(){return i("git tag '"+t+"'")}))});var n=require("faithful-exec"),r=require("shelljs"
)};